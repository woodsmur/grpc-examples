FROM golang:1.13.5-stretch AS builder

ENV GO111MODULE=on \
    CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64

# RUN sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list \
# 	&& apt-get update \
# 	&& apt-get install upx

RUN apt-get update && apt-get install -y upx
WORKDIR /build

# Let's cache modules retrieval - those don't change so often
COPY go.mod .
COPY go.sum .
RUN go mod download

# Copy the code necessary to build the application
# You may want to change this to copy only what you actually need.
COPY . .

# Build the application
RUN mkdir /data
RUN go build -o /data/helloworld-server cmd/helloworld-server/main.go
RUN cd /data && upx helloworld-server

# Let's create a /dist folder containing just the files necessary for runtime.
# Later, it will be copied as the / (root) of the output image.
# RUN cp /build/helloworld-server /data/helloworld-server
# RUN cp /build/helloworld-server /data/helloworld-client

# Copy or create other directories/files your app needs during runtime.
# E.g. this example uses /data as a working directory that would probably
#      be bound to a perstistent dir when running the container normally

# Create the minimal runtime image
# FROM scratch
FROM alpine:3.11.2

# RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories
# RUN apk add --no-cache bash

# COPY --chown=0:0 --from=builder /data /data
COPY --from=builder /data /data
# Set up the app to run as a non-root user inside the /data folder
# User ID 65534 is usually user 'nobody'.
# The executor of this image should still specify a user during setup.
# COPY --chown=65534:0 --from=builder /data /data
# USER 65534
# WORKDIR /data
EXPOSE 50051
ENTRYPOINT ["/data/helloworld-server"]
